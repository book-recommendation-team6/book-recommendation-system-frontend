/**
 * Script sinh d·ªØ li·ªáu t∆∞∆°ng t√°c user-book cho h·ªá th·ªëng g·ª£i √Ω
 * - Favorites: User y√™u th√≠ch s√°ch
 * - Ratings: User ƒë√°nh gi√° s√°ch (1-5 sao + comment)
 * - Reading History: L·ªãch s·ª≠ ƒë·ªçc s√°ch
 * 
 * S·ª≠ d·ª•ng: node scripts/generate-interactions.js
 */

import axios from 'axios';

const CONFIG = {
  API_BASE_URL: 'http://localhost:8080/api/v1',
  // S·ªë l∆∞·ª£ng t∆∞∆°ng t√°c m·ªói user (random trong kho·∫£ng)
  MIN_FAVORITES_PER_USER: 3,
  MAX_FAVORITES_PER_USER: 15,
  MIN_RATINGS_PER_USER: 5,
  MAX_RATINGS_PER_USER: 20,
  MIN_HISTORY_PER_USER: 10,
  MAX_HISTORY_PER_USER: 30,
};

// M·∫´u comments cho rating (ti·∫øng Vi·ªát th·ª±c t·∫ø)
const RATING_COMMENTS = {
  5: [
    'S√°ch r·∫•t hay! T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c r·∫•t nhi·ªÅu ƒëi·ªÅu b·ªï √≠ch.',
    'Tuy·ªát v·ªùi! M·ªôt trong nh·ªØng cu·ªën s√°ch hay nh·∫•t t√¥i t·ª´ng ƒë·ªçc.',
    'N·ªôi dung s√¢u s·∫Øc, c√°ch vi·∫øt d·ªÖ hi·ªÉu. R·∫•t ƒë√°ng ƒë·ªçc!',
    'Cu·ªën s√°ch n√†y ƒë√£ thay ƒë·ªïi c√°ch nh√¨n c·ªßa t√¥i v·ªÅ cu·ªôc s·ªëng.',
    'Xu·∫•t s·∫Øc! Kh√¥ng th·ªÉ ƒë·∫∑t xu·ªëng ƒë∆∞·ª£c.',
    'N·ªôi dung phong ph√∫, l·ªùi vƒÉn hay. Recommend!',
    'S√°ch hay qu√°! ƒê·ªçc xong mu·ªën ƒë·ªçc l·∫°i.',
  ],
  4: [
    'S√°ch kh√° hay, c√≥ nhi·ªÅu ƒëi·ªÉm th√∫ v·ªã.',
    'N·ªôi dung t·ªët, nh∆∞ng c√≥ ph·∫ßn h∆°i d√†i d√≤ng.',
    'ƒê√°ng ƒë·ªçc! M·ªôt s·ªë ch∆∞∆°ng r·∫•t hay.',
    'Kh√° ·ªïn, h·ªçc ƒë∆∞·ª£c nhi·ªÅu th·ª©.',
    'Hay nh∆∞ng ch∆∞a th·ª±c s·ª± xu·∫•t s·∫Øc.',
    'N·ªôi dung t·ªët, c√°ch tr√¨nh b√†y c√≥ th·ªÉ c·∫£i thi·ªán.',
  ],
  3: [
    'B√¨nh th∆∞·ªùng, c√≥ th·ªÉ ƒë·ªçc th·ª≠.',
    'Kh√¥ng qu√° hay nh∆∞ng c≈©ng kh√¥ng t·ªá.',
    'C√≥ v√†i ƒëi·ªÉm th√∫ v·ªã nh∆∞ng t·ªïng th·ªÉ ch∆∞a ·∫•n t∆∞·ª£ng.',
    'T·∫°m ƒë∆∞·ª£c, ph√π h·ª£p ƒë·ªÉ gi·∫£i tr√≠.',
    'N·ªôi dung ·ªïn nh∆∞ng c√°ch vi·∫øt ch∆∞a h·∫•p d·∫´n l·∫Øm.',
  ],
  2: [
    'H∆°i nh√†m ch√°n, kh√¥ng nh∆∞ mong ƒë·ª£i.',
    'N·ªôi dung kh√¥ng ƒë∆∞·ª£c h·∫•p d·∫´n l·∫Øm.',
    'C√≥ th·ªÉ b·ªè qua cu·ªën n√†y.',
    'Kh√¥ng ph√π h·ª£p v·ªõi t√¥i.',
  ],
  1: [
    'Kh√¥ng hay, l√£ng ph√≠ th·ªùi gian.',
    'N·ªôi dung qu√° nh·∫°t nh·∫Ωo.',
    'Kh√¥ng recommend.',
  ],
};

// Progress levels cho reading history
const PROGRESS_LEVELS = [0.1, 0.25, 0.5, 0.75, 0.95, 1.0];

/**
 * Random number trong kho·∫£ng [min, max]
 */
function randomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

/**
 * Random element t·ª´ array
 */
function randomChoice(array) {
  return array[Math.floor(Math.random() * array.length)];
}

/**
 * Shuffle array
 */
function shuffle(array) {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ users t·ª´ backend
 */
async function getAllUsers(token) {
  try {
    const response = await axios.get(`${CONFIG.API_BASE_URL}/admin/users`, {
      params: { page: 0, size: 1000 },
      headers: { Authorization: `Bearer ${token}` },
    });
    const users = response.data?.data?.content || response.data?.content || [];
    return users.filter(u => u.role !== 'ADMIN'); // Lo·∫°i admin ra
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch users:', error.response?.data || error.message);
    return [];
  }
}

/**
 * L·∫•y danh s√°ch t·∫•t c·∫£ books t·ª´ backend
 */
async function getAllBooks() {
  try {
    const response = await axios.get(`${CONFIG.API_BASE_URL}/books`, {
      params: { page: 0, size: 1000 },
    });
    return response.data?.data?.content || response.data?.content || [];
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch books:', error.response?.data || error.message);
    return [];
  }
}

/**
 * Th√™m s√°ch v√†o favorites
 */
async function addToFavorites(userToken, userId, bookId) {
  try {
    await axios.post(
      `${CONFIG.API_BASE_URL}/users/${userId}/favorites/${bookId}`,
      {},
      { headers: { Authorization: `Bearer ${userToken}` } }
    );
    return true;
  } catch (error) {
    // B·ªè qua l·ªói tr√πng l·∫∑p
    if (error.response?.status === 409) return false;
    console.error(`   ‚ö†Ô∏è  L·ªói add favorite: ${error.response?.data?.message || error.message}`);
    return false;
  }
}

/**
 * T·∫°o rating cho s√°ch
 */
async function createRating(userToken, userId, bookId, ratingValue, comment) {
  try {
    await axios.post(
      `${CONFIG.API_BASE_URL}/users/${userId}/books/${bookId}/ratings`,
      { value: ratingValue, comment },
      { headers: { Authorization: `Bearer ${userToken}` } }
    );
    return true;
  } catch (error) {
    console.error(`   ‚ö†Ô∏è  L·ªói create rating: ${error.response?.data?.message || error.message}`);
    return false;
  }
}

/**
 * Ghi l·ªãch s·ª≠ ƒë·ªçc s√°ch
 */
async function recordHistory(userToken, userId, bookId, progress) {
  try {
    await axios.post(
      `${CONFIG.API_BASE_URL}/users/${userId}/books/${bookId}/history`,
      { progress },
      { headers: { Authorization: `Bearer ${userToken}` } }
    );
    return true;
  } catch (error) {
    console.error(`   ‚ö†Ô∏è  L·ªói record history: ${error.response?.data?.message || error.message}`);
    return false;
  }
}

/**
 * ƒêƒÉng nh·∫≠p user ƒë·ªÉ l·∫•y token
 */
async function loginUser(email, password = 'Duy2592004!?') {
  try {
    const response = await axios.post(`${CONFIG.API_BASE_URL}/auth/login`, {
      email,
      password,
    });
    console.log('response', response);
    return response.data?.data?.jwt || response.data?.jwt;
  } catch (error) {
    console.error(`   ‚ö†Ô∏è  L·ªói login user ${email}:`, error.response?.data?.message || error.message);
    console.error('   ‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i', error);
    return null;
  }
}

/**
 * Sinh d·ªØ li·ªáu t∆∞∆°ng t√°c cho 1 user
 */
async function generateInteractionsForUser(user, allBooks, index, total) {
  console.log(`\nüë§ [${index + 1}/${total}] User: ${user.fullName} (${user.email})`);
  
  // Login ƒë·ªÉ l·∫•y token
  const userToken = await loginUser(user.email);
  if (!userToken) {
    console.log('   ‚ùå Kh√¥ng th·ªÉ login, b·ªè qua user n√†y');
    return { favorites: 0, ratings: 0, history: 0 };
  }
  
  const shuffledBooks = shuffle(allBooks);
  const stats = { favorites: 0, ratings: 0, history: 0 };
  
  // 1. T·∫°o Favorites
  const numFavorites = randomInt(CONFIG.MIN_FAVORITES_PER_USER, CONFIG.MAX_FAVORITES_PER_USER);
  const favoriteBooks = shuffledBooks.slice(0, numFavorites);
  
  console.log(`   üíñ T·∫°o ${numFavorites} favorites...`);
  for (const book of favoriteBooks) {
    const success = await addToFavorites(userToken, user.id, book.id);
    if (success) stats.favorites++;
    await new Promise(r => setTimeout(r, 100)); // Delay 100ms
  }
  
  // 2. T·∫°o Ratings (c√≥ th·ªÉ overlap v·ªõi favorites)
  const numRatings = randomInt(CONFIG.MIN_RATINGS_PER_USER, CONFIG.MAX_RATINGS_PER_USER);
  const ratingBooks = shuffledBooks.slice(0, numRatings);
  
  console.log(`   ‚≠ê T·∫°o ${numRatings} ratings...`);
  for (const book of ratingBooks) {
    // Rating theo ph√¢n ph·ªëi th·ª±c t·∫ø: 5 sao nhi·ªÅu nh·∫•t, 1 sao √≠t nh·∫•t
    const rand = Math.random();
    let ratingValue;
    if (rand < 0.4) ratingValue = 5;      // 40% l√† 5 sao
    else if (rand < 0.7) ratingValue = 4; // 30% l√† 4 sao
    else if (rand < 0.85) ratingValue = 3; // 15% l√† 3 sao
    else if (rand < 0.95) ratingValue = 2; // 10% l√† 2 sao
    else ratingValue = 1;                  // 5% l√† 1 sao
    
    const comment = randomChoice(RATING_COMMENTS[ratingValue]);
    const success = await createRating(userToken, user.id, book.id, ratingValue, comment);
    if (success) stats.ratings++;
    await new Promise(r => setTimeout(r, 100));
  }
  
  // 3. T·∫°o Reading History (c√≥ th·ªÉ overlap v·ªõi ratings)
  const numHistory = randomInt(CONFIG.MIN_HISTORY_PER_USER, CONFIG.MAX_HISTORY_PER_USER);
  const historyBooks = shuffledBooks.slice(0, numHistory);
  
  console.log(`   üìñ T·∫°o ${numHistory} reading history...`);
  for (const book of historyBooks) {
    const progress = randomChoice(PROGRESS_LEVELS);
    const success = await recordHistory(userToken, user.id, book.id, progress);
    if (success) stats.history++;
    await new Promise(r => setTimeout(r, 100));
  }
  
  console.log(`   ‚úÖ Ho√†n th√†nh: ${stats.favorites} favorites, ${stats.ratings} ratings, ${stats.history} history`);
  return stats;
}

/**
 * Main function
 */
async function main() {
  console.log('üöÄ B·∫ÆT ƒê·∫¶U SINH D·ªÆ LI·ªÜU T∆Ø∆†NG T√ÅC CHO H·ªÜ TH·ªêNG G·ª¢I √ù\n');
  console.log('‚ïê'.repeat(60));
  
  // L·∫•y admin token t·ª´ args ho·∫∑c env
  const args = process.argv.slice(2);
  const tokenIndex = args.indexOf('--token');
  const adminToken = tokenIndex !== -1 ? args[tokenIndex + 1] : process.env.ADMIN_TOKEN;
  
  if (!adminToken) {
    console.error('‚ùå Vui l√≤ng cung c·∫•p admin token:');
    console.error('   node scripts/generate-interactions.js --token YOUR_ADMIN_TOKEN');
    console.error('   ho·∫∑c set ADMIN_TOKEN=YOUR_TOKEN');
    process.exit(1);
  }
  
  // 1. L·∫•y danh s√°ch users v√† books
  console.log('üìä ƒêang t·∫£i d·ªØ li·ªáu...\n');
  const [users, books] = await Promise.all([
    getAllUsers(adminToken),
    getAllBooks(),
  ]);
  
  if (users.length === 0 || books.length === 0) {
    console.error('‚ùå Kh√¥ng c√≥ users ho·∫∑c books ƒë·ªÉ t·∫°o t∆∞∆°ng t√°c!');
    process.exit(1);
  }
  
  console.log(`üë• T√¨m th·∫•y ${users.length} users`);
  console.log(`üìö T√¨m th·∫•y ${books.length} books\n`);
  console.log('‚ïê'.repeat(60));
  
  // 2. Sinh t∆∞∆°ng t√°c cho t·ª´ng user
  const totalStats = { favorites: 0, ratings: 0, history: 0 };
  
  for (let i = 0; i < users.length; i++) {
    const stats = await generateInteractionsForUser(users[i], books, i, users.length);
    totalStats.favorites += stats.favorites;
    totalStats.ratings += stats.ratings;
    totalStats.history += stats.history;
    
    // Delay gi·ªØa c√°c user
    if (i < users.length - 1) {
      await new Promise(r => setTimeout(r, 500));
    }
  }
  
  // 3. Hi·ªÉn th·ªã k·∫øt qu·∫£
  console.log('\n' + '‚ïê'.repeat(60));
  console.log('üìä K·∫æT QU·∫¢ T·ªîNG H·ª¢P:');
  console.log('‚ïê'.repeat(60));
  console.log(`üë• T·ªïng s·ªë users: ${users.length}`);
  console.log(`üìö T·ªïng s·ªë books: ${books.length}`);
  console.log('');
  console.log('üìà D·ªÆ LI·ªÜU ƒê√É T·∫†O:');
  console.log(`   üíñ Favorites: ${totalStats.favorites}`);
  console.log(`   ‚≠ê Ratings: ${totalStats.ratings}`);
  console.log(`   üìñ Reading History: ${totalStats.history}`);
  console.log('');
  console.log('üìä TRUNG B√åNH M·ªñI USER:');
  console.log(`   üíñ Favorites: ${(totalStats.favorites / users.length).toFixed(1)}`);
  console.log(`   ‚≠ê Ratings: ${(totalStats.ratings / users.length).toFixed(1)}`);
  console.log(`   üìñ Reading History: ${(totalStats.history / users.length).toFixed(1)}`);
  console.log('‚ïê'.repeat(60));
  console.log('‚úÖ HO√ÄN T·∫§T SINH D·ªÆ LI·ªÜU!\n');
  console.log('üí° D·ªØ li·ªáu n√†y c√≥ th·ªÉ d√πng ƒë·ªÉ hu·∫•n luy·ªán:');
  console.log('   - Collaborative Filtering (User-User, Item-Item)');
  console.log('   - Matrix Factorization (SVD, ALS)');
  console.log('   - Content-based Filtering');
  console.log('   - Hybrid Recommendation Systems');
}

// Ch·∫°y script
main().catch(error => {
  console.error('\nüí• L·ªói kh√¥ng x·ª≠ l√Ω ƒë∆∞·ª£c:', error);
  process.exit(1);
});
